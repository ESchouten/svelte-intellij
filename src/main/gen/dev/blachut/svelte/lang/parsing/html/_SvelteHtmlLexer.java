/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package dev.blachut.svelte.lang.parsing.html;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.xml.*;
import com.intellij.psi.TokenType;
import dev.blachut.svelte.lang.psi.SvelteTokenTypes;
import com.intellij.lang.javascript.JSTokenTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>SvelteHtmlLexer.flex</tt>
 */
public class _SvelteHtmlLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int DOC_TYPE = 2;
  public static final int COMMENT = 4;
  public static final int START_TAG_NAME = 6;
  public static final int END_TAG_NAME = 8;
  public static final int BEFORE_TAG_ATTRIBUTES = 10;
  public static final int TAG_ATTRIBUTES = 12;
  public static final int ATTRIBUTE_BRACES = 14;
  public static final int ATTRIBUTE_VALUE_START = 16;
  public static final int ATTRIBUTE_VALUE_BRACES = 18;
  public static final int ATTRIBUTE_VALUE_AFTER_BRACES = 20;
  public static final int ATTRIBUTE_VALUE_DQ = 22;
  public static final int ATTRIBUTE_VALUE_DQ_BRACES = 24;
  public static final int ATTRIBUTE_VALUE_SQ = 26;
  public static final int ATTRIBUTE_VALUE_SQ_BRACES = 28;
  public static final int PROCESSING_INSTRUCTION = 30;
  public static final int TAG_CHARACTERS = 32;
  public static final int C_COMMENT_START = 34;
  public static final int C_COMMENT_END = 36;
  public static final int SVELTE_INTERPOLATION_START = 38;
  public static final int SVELTE_INTERPOLATION_KEYWORD = 40;
  public static final int SVELTE_INTERPOLATION = 42;
  public static final int RAW_CONTENT = 44;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  7,  7,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 
    15, 15, 16, 16, 17, 17, 18, 18, 19, 19,  7,  7, 20, 20
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 14208 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\34\1\35\2\11\1\14\1\36\3\11\1\37\10\11\1\40\1\41\5\14\1\42\1\43"+
    "\11\11\1\44\2\11\1\45\5\11\1\46\4\11\1\47\1\50\4\11\51\14\1\51\3\14\1\52\1"+
    "\53\4\14\1\54\12\11\1\55\u0381\11");

  /* The ZZ_CMAP_Y table has 2944 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34"+
    "\13\1\15\1\16\1\17\10\1\1\20\1\21\1\13\1\22\4\13\1\23\10\13\1\24\12\13\1\25"+
    "\1\13\1\26\1\25\1\13\1\27\4\1\1\13\1\30\1\31\2\1\2\13\1\30\1\1\1\32\1\25\5"+
    "\13\1\33\1\34\1\35\1\1\1\36\1\13\1\1\1\37\5\13\1\40\1\41\1\42\1\13\1\30\1"+
    "\43\1\13\1\44\1\45\1\1\1\13\1\46\4\1\1\13\1\47\4\1\1\50\2\13\1\51\1\1\1\52"+
    "\1\16\1\25\1\53\1\54\1\55\1\56\1\57\1\60\2\16\1\61\1\54\1\55\1\62\1\1\1\63"+
    "\1\1\1\64\1\65\1\22\1\55\1\66\1\1\1\67\1\16\1\70\1\71\1\54\1\55\1\66\1\1\1"+
    "\60\1\16\1\41\1\72\1\73\1\74\1\75\1\1\1\67\2\1\1\76\1\36\1\55\1\51\1\1\1\77"+
    "\1\16\1\1\1\100\1\36\1\55\1\101\1\1\1\57\1\16\1\102\1\76\1\36\1\13\1\103\1"+
    "\57\1\104\1\16\1\42\1\105\1\106\1\13\1\107\1\110\3\1\1\25\2\13\1\111\1\110"+
    "\3\1\1\112\1\113\1\114\1\115\1\116\1\117\2\1\1\67\3\1\1\120\1\13\1\121\1\1"+
    "\1\122\7\1\2\13\1\30\1\123\1\1\1\124\1\125\1\126\1\127\1\1\2\13\1\130\2\13"+
    "\1\131\24\13\1\132\1\133\2\13\1\132\2\13\1\134\1\135\1\14\3\13\1\135\3\13"+
    "\1\30\2\1\1\13\1\1\5\13\1\136\1\25\45\13\1\137\1\13\1\140\1\30\4\13\1\30\1"+
    "\141\1\142\1\16\1\13\1\16\1\13\1\16\1\142\1\67\3\13\1\143\1\1\1\144\4\1\5"+
    "\13\1\27\1\145\1\13\1\146\4\13\1\40\1\13\1\147\3\1\1\13\1\150\1\151\2\13\1"+
    "\152\1\13\1\75\3\1\1\13\1\110\3\13\1\151\4\1\1\153\5\1\1\105\2\13\1\143\1"+
    "\154\3\1\1\155\1\13\1\156\1\42\2\13\1\40\1\1\2\13\1\143\1\1\1\37\1\42\1\13"+
    "\1\150\1\46\5\1\1\157\1\160\14\13\4\1\21\13\1\136\2\13\1\136\1\161\1\13\1"+
    "\150\3\13\1\162\1\163\1\164\1\121\1\163\1\165\1\1\1\166\2\1\1\167\1\1\1\170"+
    "\1\1\1\121\6\1\1\171\1\172\1\173\1\174\1\175\3\1\1\176\147\1\2\13\1\147\2"+
    "\13\1\147\10\13\1\177\1\200\2\13\1\130\3\13\1\201\1\1\1\13\1\110\4\202\4\1"+
    "\1\123\35\1\1\203\2\1\1\204\1\25\4\13\1\205\1\25\4\13\1\131\1\105\1\13\1\150"+
    "\1\25\4\13\1\147\1\1\1\13\1\30\3\1\1\13\40\1\133\13\1\40\4\1\135\13\1\40\2"+
    "\1\10\13\1\121\4\1\2\13\1\150\20\13\1\121\1\13\1\206\1\1\2\13\1\147\1\123"+
    "\1\13\1\150\4\13\1\40\2\1\1\207\1\210\5\13\1\211\1\13\1\147\1\27\3\1\1\207"+
    "\1\212\1\13\1\31\1\1\3\13\1\143\1\210\2\13\1\143\3\1\1\213\1\42\1\13\1\40"+
    "\1\13\1\110\1\1\1\13\1\121\1\50\2\13\1\31\1\123\1\1\1\214\1\215\2\13\1\46"+
    "\1\1\1\216\1\1\1\13\1\217\3\13\1\220\1\221\1\222\1\30\1\64\1\223\1\224\1\202"+
    "\2\13\1\131\1\40\7\13\1\31\1\1\72\13\1\143\1\13\1\225\2\13\1\152\20\1\26\13"+
    "\1\150\6\13\1\75\2\1\1\110\1\226\1\55\1\227\1\230\6\13\1\16\1\1\1\155\25\13"+
    "\1\150\1\1\4\13\1\210\2\13\1\27\2\1\1\152\7\1\1\214\7\13\1\121\2\1\1\25\1"+
    "\30\1\25\1\30\1\231\4\13\1\147\1\232\1\233\2\1\1\234\1\13\1\14\1\235\2\150"+
    "\2\1\7\13\1\30\30\1\1\13\1\121\3\13\1\67\2\1\2\13\1\1\1\13\1\236\2\13\1\40"+
    "\1\13\1\150\2\13\1\237\3\1\11\13\1\150\1\1\2\13\1\237\1\13\1\152\2\13\1\27"+
    "\3\13\1\143\11\1\23\13\1\110\1\13\1\40\1\27\11\1\1\240\2\13\1\241\1\13\1\40"+
    "\1\13\1\110\1\13\1\147\4\1\1\13\1\242\1\13\1\40\1\13\1\75\4\1\3\13\1\243\4"+
    "\1\1\67\1\244\1\13\1\143\2\1\1\13\1\121\1\13\1\121\2\1\1\120\1\13\1\151\1"+
    "\1\3\13\1\40\1\13\1\40\1\13\1\31\1\13\1\16\6\1\4\13\1\46\3\1\3\13\1\31\3\13"+
    "\1\31\60\1\1\155\2\13\1\27\4\1\1\155\2\13\2\1\1\13\1\46\1\1\1\155\1\13\1\110"+
    "\2\1\2\13\1\245\1\155\2\13\1\31\1\246\1\247\2\1\1\13\1\22\1\152\5\1\1\250"+
    "\1\251\1\46\2\13\1\147\2\1\1\71\1\54\1\55\1\66\1\1\1\252\1\16\11\1\3\13\1"+
    "\151\1\253\3\1\3\13\1\1\1\254\13\1\2\13\1\147\2\1\1\255\2\1\3\13\1\1\1\256"+
    "\3\1\2\13\1\30\5\1\1\13\1\75\30\1\4\13\1\1\1\123\34\1\3\13\1\46\20\1\1\55"+
    "\1\13\1\147\1\1\1\67\2\1\1\210\1\13\67\1\71\13\1\75\16\1\14\13\1\143\53\1"+
    "\2\13\1\147\75\1\44\13\1\110\33\1\43\13\1\46\1\13\1\147\7\1\1\13\1\150\1\1"+
    "\3\13\1\1\1\143\1\1\1\155\1\257\1\13\67\1\4\13\1\151\1\67\3\1\1\155\4\1\1"+
    "\67\1\1\76\13\1\121\1\1\57\13\1\31\20\1\1\16\77\1\6\13\1\30\1\121\1\46\1\75"+
    "\66\1\5\13\1\214\3\13\1\142\1\260\1\261\1\262\3\13\1\263\1\264\1\13\1\265"+
    "\1\266\1\36\24\13\1\267\1\13\1\36\1\131\1\13\1\131\1\13\1\214\1\13\1\214\1"+
    "\147\1\13\1\147\1\13\1\55\1\13\1\55\1\13\1\216\3\1\14\13\1\151\3\1\4\13\1"+
    "\143\113\1\1\262\1\13\1\270\1\271\1\272\1\273\1\274\1\275\1\276\1\152\1\277"+
    "\1\152\24\1\55\13\1\110\2\1\103\13\1\151\15\13\1\150\150\13\1\16\25\1\41\13"+
    "\1\150\36\1");

  /* The ZZ_CMAP_A table has 3072 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\2\27\1\4\2\27\22\0\1\27\1\32\1\6\1\65\1\64\1\0\1\57\1\5\2\56\3\0\1\25"+
    "\1\24\1\61\12\2\1\23\1\75\1\31\1\30\1\55\1\60\1\66\1\101\1\52\1\36\1\33\1"+
    "\42\1\101\1\1\1\43\1\54\2\1\1\47\1\45\1\1\1\34\1\41\3\1\1\37\1\50\2\1\1\100"+
    "\1\40\1\1\1\62\1\10\1\63\1\0\1\22\1\7\1\70\1\53\1\12\1\33\1\21\1\67\1\76\1"+
    "\44\1\14\1\1\1\73\1\20\1\46\1\72\1\35\1\15\1\77\1\13\1\11\1\16\1\51\1\1\1"+
    "\71\1\100\1\17\1\1\1\26\1\56\1\74\7\0\1\3\12\0\1\4\11\0\1\1\12\0\1\1\4\0\1"+
    "\1\5\0\27\1\1\0\12\1\4\0\14\1\16\0\5\1\7\0\1\1\1\0\1\1\1\0\5\1\1\0\2\1\2\0"+
    "\4\1\1\0\1\1\6\0\1\1\1\0\3\1\1\0\1\1\1\0\4\1\1\0\23\1\1\0\13\1\10\0\6\1\1"+
    "\0\26\1\2\0\1\1\6\0\10\1\10\0\13\1\5\0\3\1\33\0\6\1\1\0\1\1\17\0\2\1\7\0\2"+
    "\1\12\0\3\1\2\0\2\1\1\0\16\1\15\0\11\1\13\0\1\1\30\0\6\1\4\0\2\1\4\0\1\1\5"+
    "\0\6\1\4\0\1\1\11\0\1\1\3\0\1\1\7\0\11\1\7\0\5\1\1\0\10\1\6\0\26\1\3\0\1\1"+
    "\2\0\1\1\7\0\11\1\4\0\10\1\2\0\2\1\2\0\26\1\1\0\7\1\1\0\1\1\3\0\4\1\3\0\1"+
    "\1\20\0\1\1\15\0\2\1\1\0\1\1\5\0\6\1\4\0\2\1\1\0\2\1\1\0\2\1\1\0\2\1\17\0"+
    "\4\1\1\0\1\1\3\0\3\1\20\0\11\1\1\0\2\1\1\0\2\1\1\0\5\1\3\0\1\1\2\0\1\1\30"+
    "\0\1\1\13\0\10\1\2\0\1\1\3\0\1\1\1\0\6\1\3\0\3\1\1\0\4\1\3\0\2\1\1\0\1\1\1"+
    "\0\2\1\3\0\2\1\3\0\3\1\3\0\14\1\13\0\10\1\1\0\2\1\10\0\3\1\5\0\1\1\4\0\10"+
    "\1\1\0\6\1\1\0\5\1\3\0\1\1\3\0\2\1\15\0\13\1\2\0\1\1\6\0\3\1\10\0\1\1\5\0"+
    "\22\1\3\0\10\1\1\0\11\1\1\0\1\1\2\0\7\1\11\0\1\1\1\0\2\1\15\0\2\1\1\0\1\1"+
    "\2\0\2\1\1\0\1\1\2\0\1\1\6\0\4\1\1\0\7\1\1\0\3\1\1\0\1\1\1\0\1\1\2\0\2\1\1"+
    "\0\4\1\1\0\2\1\11\0\1\1\2\0\5\1\1\0\1\1\25\0\14\1\1\0\24\1\13\0\5\1\22\0\7"+
    "\1\4\0\4\1\3\0\1\1\3\0\2\1\7\0\3\1\4\0\15\1\14\0\1\1\1\0\6\1\1\0\1\1\5\0\1"+
    "\1\2\0\13\1\1\0\15\1\1\0\4\1\2\0\7\1\1\0\1\1\1\0\4\1\2\0\1\1\1\0\4\1\2\0\7"+
    "\1\1\0\1\1\1\0\4\1\2\0\16\1\2\0\6\1\2\0\15\1\2\0\1\1\1\4\17\1\1\0\10\1\7\0"+
    "\15\1\1\0\6\1\23\0\1\1\4\0\1\1\3\0\5\1\2\0\22\1\1\0\1\1\5\0\17\1\1\0\16\1"+
    "\2\0\5\1\13\0\14\1\13\0\1\1\15\0\7\1\7\0\16\1\15\0\2\1\11\0\4\1\1\0\4\1\3"+
    "\0\2\1\11\0\10\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0\6\1\1\0\7\1\1\0\1\1\3\0\3\1\1"+
    "\0\7\1\3\0\4\1\2\0\6\1\4\0\13\4\15\0\2\3\5\0\1\4\17\0\1\4\1\0\1\1\15\0\1\1"+
    "\2\0\1\1\4\0\1\1\2\0\12\1\1\0\1\1\3\0\5\1\6\0\1\1\1\0\1\1\1\0\1\1\1\0\4\1"+
    "\1\0\13\1\2\0\4\1\5\0\5\1\4\0\1\1\4\0\2\1\13\0\5\1\6\0\4\1\3\0\2\1\14\0\10"+
    "\1\7\0\10\1\1\0\7\1\1\0\1\4\4\0\2\1\12\0\5\1\5\0\2\1\3\0\7\1\6\0\3\1\12\0"+
    "\2\1\13\0\11\1\2\0\27\1\2\0\7\1\1\0\3\1\1\0\4\1\1\0\4\1\2\0\6\1\3\0\1\1\1"+
    "\0\1\1\2\0\5\1\1\0\12\1\12\0\5\1\1\0\3\1\1\0\10\1\4\0\7\1\3\0\1\1\3\0\2\1"+
    "\1\0\1\1\3\0\2\1\2\0\5\1\2\0\1\1\1\0\1\1\30\0\3\1\3\0\6\1\2\0\6\1\2\0\6\1"+
    "\11\0\7\1\4\0\5\1\3\0\5\1\5\0\1\1\1\0\10\1\1\0\5\1\1\0\1\1\1\0\2\1\1\0\2\1"+
    "\1\0\12\1\6\0\12\1\2\0\6\1\2\0\6\1\2\0\6\1\2\0\3\1\3\0\14\1\1\0\16\1\1\0\2"+
    "\1\1\0\2\1\1\0\10\1\6\0\4\1\4\0\16\1\2\0\1\1\1\0\14\1\1\0\2\1\3\0\1\1\2\0"+
    "\4\1\1\0\2\1\12\0\10\1\6\0\6\1\1\0\3\1\1\0\12\1\3\0\1\1\12\0\4\1\25\0\1\1"+
    "\1\0\1\1\3\0\7\1\1\0\1\1\1\0\4\1\1\0\17\1\1\0\2\1\14\0\3\1\7\0\4\1\11\0\2"+
    "\1\1\0\1\1\20\0\4\1\10\0\1\1\13\0\10\1\5\0\3\1\2\0\1\1\2\0\2\1\2\0\4\1\1\0"+
    "\14\1\1\0\1\1\1\0\7\1\1\0\21\1\1\0\4\1\2\0\10\1\1\0\7\1\1\0\14\1\1\0\4\1\1"+
    "\0\5\1\1\0\1\1\3\0\14\1\2\0\10\1\1\0\2\1\1\0\1\1\2\0\1\1\1\0\12\1\1\0\4\1"+
    "\1\0\1\1\1\0\1\1\6\0\1\1\4\0\1\1\1\0\1\1\1\0\1\1\1\0\3\1\1\0\2\1\1\0\1\1\2"+
    "\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0\2\1\1\0\1\1\2\0\4\1\1\0\7\1\1\0"+
    "\4\1\1\0\4\1\1\0\1\1\1\0\12\1\1\0\5\1\1\0\3\1\1\0\5\1\1\0\5\1");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\15\0\1\2\6\0\1\1\1\3\1\1\1\4"+
    "\1\3\3\1\1\5\1\6\4\5\1\7\1\5\3\10"+
    "\1\11\1\10\1\12\1\13\2\14\1\15\2\13\1\16"+
    "\1\17\1\13\1\20\1\6\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\23\1\27\1\23\1\30\1\31\1\6"+
    "\1\32\1\33\1\34\4\31\1\35\1\36\1\35\1\37"+
    "\1\35\1\40\1\2\1\41\1\5\3\42\1\43\1\10"+
    "\3\43\1\44\1\45\1\46\1\47\1\45\1\50\1\51"+
    "\1\52\7\45\1\1\1\53\1\0\1\54\1\55\14\0"+
    "\2\14\1\55\1\56\1\57\2\31\2\0\1\60\1\45"+
    "\1\61\5\45\3\0\1\62\1\63\12\0\1\64\1\0"+
    "\1\65\2\14\5\45\1\66\1\0\1\67\1\0\1\70"+
    "\3\0\1\20\1\71\1\5\2\14\1\45\1\72\1\73"+
    "\1\74\1\45\4\0\1\14\1\75\1\76\1\77\3\0"+
    "\1\100\4\0\1\62\1\0\1\101";

  private static int [] zzUnpackAction() {
    int [] result = new int[201];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\u0108\0\u014a\0\u018c\0\u01ce"+
    "\0\u0210\0\u0252\0\u0294\0\u02d6\0\u0318\0\u035a\0\u039c\0\u03de"+
    "\0\u0420\0\u0462\0\u04a4\0\u04e6\0\u0528\0\u056a\0\u05ac\0\u05ee"+
    "\0\u0630\0\u0672\0\u06b4\0\u06f6\0\u0630\0\u0630\0\u0738\0\u077a"+
    "\0\u07bc\0\u07fe\0\u0840\0\u0630\0\u06f6\0\u0630\0\u0882\0\u08c4"+
    "\0\u0630\0\u06f6\0\u0630\0\u0630\0\u0906\0\u0948\0\u0630\0\u06f6"+
    "\0\u098a\0\u09cc\0\u0630\0\u0a0e\0\u0a50\0\u0a92\0\u0630\0\u0630"+
    "\0\u0630\0\u0630\0\u0630\0\u0630\0\u0ad4\0\u0630\0\u06f6\0\u0630"+
    "\0\u0b16\0\u0b58\0\u0630\0\u0630\0\u0630\0\u0b9a\0\u0bdc\0\u0c1e"+
    "\0\u0c60\0\u0630\0\u0630\0\u0ca2\0\u0630\0\u06f6\0\u0630\0\u0ce4"+
    "\0\u0630\0\u0d26\0\u0630\0\u06f6\0\u0a0e\0\u0630\0\u0d68\0\u0daa"+
    "\0\u06f6\0\u0dec\0\u0630\0\u0630\0\u0e2e\0\u0630\0\u06f6\0\u0630"+
    "\0\u0630\0\u0630\0\u0e70\0\u0eb2\0\u0ef4\0\u0f36\0\u0f78\0\u0fba"+
    "\0\u0ffc\0\u103e\0\u1080\0\u10c2\0\u0630\0\u1104\0\u1146\0\u1188"+
    "\0\u11ca\0\u120c\0\u124e\0\u1290\0\u077a\0\u07bc\0\u12d2\0\u1314"+
    "\0\u1356\0\u1398\0\u13da\0\u141c\0\u0630\0\u0630\0\u0630\0\u145e"+
    "\0\u14a0\0\u14e2\0\u1524\0\u0630\0\u1566\0\u0e70\0\u15a8\0\u15ea"+
    "\0\u162c\0\u166e\0\u16b0\0\u16f2\0\u1734\0\u1776\0\u17b8\0\u0630"+
    "\0\u17fa\0\u183c\0\u187e\0\u18c0\0\u1902\0\u1944\0\u1986\0\u19c8"+
    "\0\u1a0a\0\u1a4c\0\u0630\0\u1a8e\0\u0630\0\u1ad0\0\u1b12\0\u1b54"+
    "\0\u1b96\0\u1bd8\0\u1c1a\0\u1c5c\0\u0e70\0\u1c9e\0\u0630\0\u1ce0"+
    "\0\u0630\0\u1d22\0\u1d64\0\u1da6\0\u0630\0\u0630\0\u1de8\0\u1e2a"+
    "\0\u1e6c\0\u1eae\0\u0e70\0\u0e70\0\u0e70\0\u1ef0\0\u1f32\0\u1f74"+
    "\0\u1fb6\0\u1ff8\0\u203a\0\u0906\0\u0e70\0\u0e70\0\u207c\0\u20be"+
    "\0\u2100\0\u0630\0\u2142\0\u2184\0\u21c6\0\u2208\0\u0630\0\u224a"+
    "\0\u0630";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[201];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\3\26\1\27\4\26\1\30\15\26\1\31\1\32\1\26"+
    "\1\33\25\26\1\34\4\26\2\35\14\26\3\36\1\37"+
    "\1\36\1\40\1\41\6\36\1\42\11\36\1\37\11\36"+
    "\1\42\1\36\2\43\10\36\1\44\1\36\1\45\22\36"+
    "\25\46\1\47\3\46\1\50\23\46\1\51\1\46\1\52"+
    "\2\46\1\53\17\46\1\54\1\55\1\54\1\37\5\54"+
    "\1\56\12\55\3\54\1\37\1\54\1\57\1\54\22\55"+
    "\2\54\1\60\7\54\5\55\2\54\4\55\1\54\1\55"+
    "\1\54\1\37\5\54\13\55\3\54\1\37\1\54\1\61"+
    "\1\54\22\55\2\54\1\60\7\54\5\55\2\54\4\55"+
    "\3\54\1\62\23\54\1\62\25\54\1\63\1\54\1\60"+
    "\1\54\1\64\20\54\3\65\1\66\1\65\2\54\17\65"+
    "\1\67\1\37\1\70\1\54\23\65\1\63\3\65\1\64"+
    "\20\65\5\71\1\72\1\73\1\74\1\75\15\71\1\76"+
    "\30\71\1\77\14\71\1\100\5\71\3\101\1\102\1\101"+
    "\1\103\1\104\17\101\1\105\1\37\25\101\1\63\3\101"+
    "\1\106\20\101\3\107\1\110\1\107\2\36\17\107\1\105"+
    "\1\62\25\107\1\63\3\107\1\111\20\107\6\112\1\113"+
    "\1\112\1\114\15\112\1\115\30\112\1\116\22\112\5\71"+
    "\1\72\1\113\1\74\1\75\15\71\1\76\30\71\1\77"+
    "\14\71\1\100\5\71\5\112\1\113\2\112\1\114\15\112"+
    "\1\117\30\112\1\116\22\112\5\71\1\113\1\73\1\74"+
    "\1\75\15\71\1\76\30\71\1\77\14\71\1\100\5\71"+
    "\55\120\1\121\2\120\1\122\21\120\3\123\1\37\23\123"+
    "\1\37\1\123\1\57\23\123\1\63\1\123\1\124\1\123"+
    "\1\125\20\123\1\126\1\127\7\126\11\127\3\126\1\130"+
    "\5\126\22\127\2\126\1\131\3\126\1\132\3\126\5\127"+
    "\2\126\4\127\1\126\1\127\7\126\11\127\3\126\1\130"+
    "\5\126\22\127\2\126\1\131\3\126\1\133\3\126\5\127"+
    "\2\126\4\127\3\134\2\135\16\134\1\136\3\134\1\135"+
    "\27\134\1\137\1\134\1\140\3\134\1\141\1\142\14\134"+
    "\1\143\1\134\2\135\4\134\1\143\1\144\1\143\1\145"+
    "\1\143\1\146\2\143\1\147\5\134\1\135\3\134\22\143"+
    "\2\134\1\137\7\134\1\143\1\150\2\143\1\151\2\134"+
    "\4\143\3\35\1\37\23\35\1\37\1\35\1\152\25\35"+
    "\1\34\22\35\10\26\1\30\15\26\2\0\1\26\1\0"+
    "\25\26\1\0\4\26\2\0\17\26\1\27\4\26\1\30"+
    "\15\26\1\0\1\32\1\26\1\0\25\26\1\0\4\26"+
    "\2\0\24\26\1\30\15\26\2\0\1\26\1\0\25\26"+
    "\1\0\22\26\105\0\1\32\23\0\1\32\53\0\1\153"+
    "\7\0\13\153\6\0\1\154\22\153\3\0\1\155\1\156"+
    "\5\0\5\153\2\0\4\153\1\0\1\157\7\0\7\157"+
    "\1\160\3\157\7\0\22\157\10\0\1\161\1\0\1\157"+
    "\1\162\1\157\1\163\1\157\2\0\1\160\1\164\2\157"+
    "\3\0\1\37\23\0\1\37\52\0\5\165\1\112\74\165"+
    "\6\166\1\112\73\166\50\0\2\167\46\0\1\170\20\0"+
    "\1\170\67\0\1\171\106\0\1\172\50\0\2\55\6\0"+
    "\15\55\5\0\22\55\12\0\5\55\2\0\4\55\1\0"+
    "\2\55\6\0\1\55\1\173\3\55\1\174\7\55\5\0"+
    "\22\55\12\0\5\55\2\0\4\55\61\0\1\175\23\0"+
    "\1\62\23\0\1\62\127\0\1\176\24\0\5\65\2\0"+
    "\20\65\3\0\23\65\1\0\3\65\1\0\23\65\1\66"+
    "\1\65\2\0\20\65\1\37\2\0\23\65\1\0\3\65"+
    "\1\0\20\65\5\0\3\71\72\0\26\101\1\177\1\0"+
    "\25\101\1\0\3\101\1\200\23\101\1\102\22\101\1\177"+
    "\1\37\25\101\1\0\3\101\1\200\46\101\1\177\1\0"+
    "\25\101\1\176\3\101\1\200\20\101\5\107\2\0\17\107"+
    "\1\177\1\0\25\107\1\0\3\107\1\201\23\107\1\110"+
    "\1\107\2\0\17\107\1\177\1\62\25\107\1\0\3\107"+
    "\1\201\75\107\1\176\3\107\1\201\20\107\64\0\1\112"+
    "\15\0\55\120\1\0\2\120\1\202\76\120\1\121\24\120"+
    "\1\0\3\127\5\0\11\127\2\0\1\127\2\0\1\127"+
    "\2\0\23\127\1\0\2\127\7\0\5\127\2\0\4\127"+
    "\25\0\1\203\131\0\1\204\27\0\2\135\22\0\1\135"+
    "\53\0\1\143\7\0\11\143\11\0\22\143\12\0\5\143"+
    "\2\0\4\143\1\0\1\143\7\0\11\143\11\0\22\143"+
    "\12\0\1\143\1\205\3\143\2\0\4\143\1\0\1\143"+
    "\7\0\11\143\11\0\22\143\12\0\1\206\4\143\2\0"+
    "\4\143\1\0\1\143\7\0\11\143\11\0\11\143\1\207"+
    "\10\143\12\0\5\143\2\0\4\143\1\0\1\143\7\0"+
    "\7\143\1\210\1\143\11\0\22\143\12\0\1\143\1\211"+
    "\3\143\2\0\4\143\1\0\1\143\7\0\11\143\11\0"+
    "\22\143\12\0\2\143\1\212\2\143\2\0\4\143\1\0"+
    "\1\143\7\0\10\143\1\213\11\0\22\143\12\0\5\143"+
    "\2\0\4\143\61\0\1\214\21\0\2\153\6\0\15\153"+
    "\5\0\22\153\12\0\5\153\2\0\4\153\25\0\1\215"+
    "\5\0\1\216\47\0\1\217\7\0\13\217\7\0\22\217"+
    "\12\0\5\217\2\0\4\217\1\0\2\157\6\0\15\157"+
    "\5\0\22\157\12\0\5\157\1\0\1\220\4\157\1\0"+
    "\2\157\6\0\5\157\1\221\7\157\5\0\22\157\12\0"+
    "\5\157\1\0\1\220\4\157\2\0\1\222\75\0\1\223"+
    "\2\0\2\157\6\0\4\157\1\224\10\157\5\0\13\157"+
    "\1\225\6\157\12\0\5\157\1\0\1\220\4\157\1\0"+
    "\2\157\6\0\15\157\5\0\20\157\1\226\1\157\12\0"+
    "\5\157\1\0\1\220\4\157\1\0\2\157\6\0\15\157"+
    "\5\0\16\157\1\227\3\157\12\0\5\157\1\0\1\220"+
    "\4\157\52\0\2\230\73\0\2\231\65\0\1\232\22\0"+
    "\1\233\51\0\1\234\34\0\1\235\20\0\2\55\6\0"+
    "\2\55\1\236\12\55\5\0\22\55\12\0\5\55\2\0"+
    "\4\55\1\0\2\55\6\0\6\55\1\237\6\55\5\0"+
    "\22\55\12\0\5\55\2\0\4\55\55\101\1\0\3\101"+
    "\1\200\20\101\55\107\1\0\3\107\1\201\20\107\55\120"+
    "\1\0\24\120\55\0\1\233\25\0\1\143\7\0\5\143"+
    "\1\240\3\143\11\0\22\143\12\0\5\143\2\0\4\143"+
    "\1\0\1\143\7\0\10\143\1\241\11\0\22\143\12\0"+
    "\5\143\2\0\4\143\1\0\1\143\7\0\1\242\10\143"+
    "\11\0\22\143\12\0\5\143\2\0\4\143\1\0\1\143"+
    "\7\0\1\143\1\243\7\143\11\0\22\143\12\0\5\143"+
    "\2\0\4\143\1\0\1\143\7\0\11\143\11\0\22\143"+
    "\12\0\1\143\1\244\3\143\2\0\4\143\1\0\1\143"+
    "\7\0\6\143\1\245\2\143\11\0\22\143\12\0\5\143"+
    "\2\0\4\143\11\0\1\246\115\0\1\247\110\0\2\250"+
    "\45\0\2\217\6\0\15\217\5\0\22\217\12\0\5\217"+
    "\2\0\4\217\1\0\2\157\6\0\15\157\5\0\22\157"+
    "\12\0\5\157\1\0\1\251\4\157\2\0\1\222\72\0"+
    "\1\251\6\0\1\252\7\0\1\252\6\0\1\252\11\0"+
    "\1\252\2\0\1\252\3\0\1\252\7\0\2\252\13\0"+
    "\2\252\10\0\1\252\1\0\2\157\6\0\15\157\5\0"+
    "\2\157\1\253\17\157\12\0\5\157\1\0\1\220\4\157"+
    "\1\0\2\157\6\0\4\157\1\221\10\157\5\0\22\157"+
    "\12\0\5\157\1\0\1\220\4\157\1\0\2\157\6\0"+
    "\1\225\14\157\5\0\22\157\12\0\5\157\1\0\1\220"+
    "\4\157\1\0\2\157\6\0\15\157\5\0\2\157\1\160"+
    "\17\157\12\0\5\157\1\0\1\220\4\157\20\0\1\254"+
    "\26\0\1\254\52\0\1\255\26\0\1\255\107\0\1\256"+
    "\51\0\1\257\55\0\2\55\6\0\3\55\1\260\11\55"+
    "\5\0\22\55\12\0\5\55\2\0\4\55\1\0\2\55"+
    "\6\0\7\55\1\261\5\55\5\0\22\55\12\0\5\55"+
    "\2\0\4\55\1\0\1\143\7\0\1\143\1\262\7\143"+
    "\11\0\22\143\12\0\5\143\2\0\4\143\1\0\1\143"+
    "\7\0\11\143\11\0\22\143\12\0\3\143\1\263\1\143"+
    "\2\0\4\143\1\0\1\143\7\0\10\143\1\264\11\0"+
    "\22\143\12\0\5\143\2\0\4\143\1\0\1\143\7\0"+
    "\11\143\11\0\11\143\1\265\10\143\12\0\5\143\2\0"+
    "\4\143\1\0\1\143\7\0\3\143\1\266\5\143\11\0"+
    "\22\143\12\0\5\143\2\0\4\143\12\0\1\267\3\0"+
    "\1\270\75\0\1\271\23\0\1\271\45\0\1\252\7\0"+
    "\1\252\6\0\1\252\11\0\1\252\2\0\1\252\3\0"+
    "\1\252\7\0\2\252\13\0\2\252\4\0\1\251\3\0"+
    "\1\252\1\0\2\157\6\0\1\221\14\157\5\0\22\157"+
    "\12\0\5\157\1\0\1\220\4\157\14\0\1\272\37\0"+
    "\1\272\52\0\1\232\27\0\1\233\25\0\2\55\6\0"+
    "\4\55\1\273\10\55\5\0\22\55\12\0\5\55\2\0"+
    "\4\55\1\0\2\55\6\0\10\55\1\274\4\55\5\0"+
    "\22\55\12\0\5\55\2\0\4\55\1\0\1\143\7\0"+
    "\11\143\11\0\11\143\1\275\10\143\12\0\5\143\2\0"+
    "\4\143\1\0\1\143\7\0\5\143\1\276\3\143\11\0"+
    "\22\143\12\0\5\143\2\0\4\143\13\0\1\277\105\0"+
    "\1\300\100\0\1\301\20\0\1\301\54\0\1\302\23\0"+
    "\1\302\44\0\2\55\6\0\5\55\1\274\7\55\5\0"+
    "\22\55\12\0\5\55\2\0\4\55\14\0\1\303\105\0"+
    "\1\304\100\0\1\305\20\0\1\305\56\0\1\306\105\0"+
    "\1\307\75\0\1\310\23\0\1\310\56\0\1\307\104\0"+
    "\1\311\20\0\1\311\37\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8844];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\15\0\1\1\6\0\3\1\1\11\3\1\2\11"+
    "\5\1\1\11\1\1\1\11\2\1\1\11\1\1\2\11"+
    "\2\1\1\11\3\1\1\11\3\1\6\11\1\1\1\11"+
    "\1\1\1\11\2\1\3\11\4\1\2\11\1\1\1\11"+
    "\1\1\1\11\1\1\1\11\1\1\1\11\2\1\1\11"+
    "\4\1\2\11\1\1\1\11\1\1\3\11\11\1\1\0"+
    "\1\11\1\1\14\0\2\1\3\11\2\1\2\0\1\11"+
    "\7\1\3\0\1\1\1\11\12\0\1\11\1\0\1\11"+
    "\10\1\1\0\1\11\1\0\1\11\3\0\2\11\10\1"+
    "\4\0\4\1\3\0\1\11\4\0\1\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[201];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private static final int NO_QUOTE = 0;
  private static final int SINGLE_QUOTE = 1;
  private static final int DOUBLE_QUOTE = 2;
  private static final int BACKQUOTE = 3;

  public int bracesNestingLevel = 0;
  public int quoteMode = NO_QUOTE;
  public int rawTag = 0;

  public _SvelteHtmlLexer() {
    this((java.io.Reader)null);
  }

  public final void yybeginNestable(int state) {
      bracesNestingLevel = 0;
      quoteMode = NO_QUOTE;
      yybegin(state);
  }

  private void toggleQuoteMode(int mode) {
    if (quoteMode == NO_QUOTE) {
      quoteMode = mode;
    } else if (quoteMode == mode) {
      quoteMode = NO_QUOTE;
    }
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _SvelteHtmlLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
      bracesNestingLevel = 0;
  quoteMode = NO_QUOTE;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return XmlTokenType.XML_DATA_CHARACTERS;
            } 
            // fall through
          case 66: break;
          case 2: 
            { return XmlTokenType.XML_PI_TARGET;
            } 
            // fall through
          case 67: break;
          case 3: 
            { return XmlTokenType.XML_REAL_WHITE_SPACE;
            } 
            // fall through
          case 68: break;
          case 4: 
            { yybeginNestable(SVELTE_INTERPOLATION_START); return SvelteTokenTypes.START_MUSTACHE;
            } 
            // fall through
          case 69: break;
          case 5: 
            { return XmlTokenType.XML_BAD_CHARACTER;
            } 
            // fall through
          case 70: break;
          case 6: 
            { return XmlTokenType.XML_WHITE_SPACE;
            } 
            // fall through
          case 71: break;
          case 7: 
            { yybegin(YYINITIAL); return XmlTokenType.XML_DOCTYPE_END;
            } 
            // fall through
          case 72: break;
          case 8: 
            { return XmlTokenType.XML_COMMENT_CHARACTERS;
            } 
            // fall through
          case 73: break;
          case 9: 
            { // according to HTML spec (http://www.w3.org/html/wg/drafts/html/master/syntax.html#comments)
  // comments should start with <!-- and end with -->. The comment <!--> is not valid, but should terminate
  // comment token. Please note that it's not true for XML (http://www.w3.org/TR/REC-xml/#sec-comments)
  int loc = getTokenStart();
  char prev = zzBuffer.charAt(loc - 1);
  char prevPrev = zzBuffer.charAt(loc - 2);
  if (prev == '-' && prevPrev == '-') {
    yybegin(YYINITIAL); return XmlTokenType.XML_BAD_CHARACTER;
  }
  return XmlTokenType.XML_COMMENT_CHARACTERS;
            } 
            // fall through
          case 74: break;
          case 10: 
            { yybegin(C_COMMENT_START); return XmlTokenType.XML_CONDITIONAL_COMMENT_START;
            } 
            // fall through
          case 75: break;
          case 11: 
            { yybegin(YYINITIAL); yypushback(1); break;
            } 
            // fall through
          case 76: break;
          case 12: 
            { rawTag = 0; yybegin(BEFORE_TAG_ATTRIBUTES); return XmlTokenType.XML_NAME;
            } 
            // fall through
          case 77: break;
          case 13: 
            { return XmlTokenType.XML_START_TAG_START;
            } 
            // fall through
          case 78: break;
          case 14: 
            { yybegin(TAG_ATTRIBUTES); return XmlTokenType.XML_WHITE_SPACE;
            } 
            // fall through
          case 79: break;
          case 15: 
            { yybegin(rawTag == 1 ? RAW_CONTENT : YYINITIAL); return XmlTokenType.XML_TAG_END;
            } 
            // fall through
          case 80: break;
          case 16: 
            { return XmlTokenType.XML_NAME;
            } 
            // fall through
          case 81: break;
          case 17: 
            { yybeginNestable(ATTRIBUTE_BRACES); return SvelteTokenTypes.START_MUSTACHE;
            } 
            // fall through
          case 82: break;
          case 18: 
            { yybegin(ATTRIBUTE_VALUE_START); return XmlTokenType.XML_EQ;
            } 
            // fall through
          case 83: break;
          case 19: 
            { return SvelteTokenTypes.CODE_FRAGMENT;
            } 
            // fall through
          case 84: break;
          case 20: 
            { toggleQuoteMode(SINGLE_QUOTE); return SvelteTokenTypes.CODE_FRAGMENT;
            } 
            // fall through
          case 85: break;
          case 21: 
            { toggleQuoteMode(DOUBLE_QUOTE); return SvelteTokenTypes.CODE_FRAGMENT;
            } 
            // fall through
          case 86: break;
          case 22: 
            { toggleQuoteMode(BACKQUOTE); return SvelteTokenTypes.CODE_FRAGMENT;
            } 
            // fall through
          case 87: break;
          case 23: 
            { if (quoteMode == NO_QUOTE) { bracesNestingLevel++; } return SvelteTokenTypes.CODE_FRAGMENT;
            } 
            // fall through
          case 88: break;
          case 24: 
            { if (quoteMode != NO_QUOTE) { return SvelteTokenTypes.CODE_FRAGMENT; }
          if (bracesNestingLevel > 0) { bracesNestingLevel--; return SvelteTokenTypes.CODE_FRAGMENT; }

          if (yystate() == SVELTE_INTERPOLATION) yybegin(YYINITIAL);
          if (yystate() == ATTRIBUTE_BRACES) yybegin(TAG_ATTRIBUTES);
          if (yystate() == ATTRIBUTE_VALUE_BRACES) yybegin(ATTRIBUTE_VALUE_AFTER_BRACES);
          if (yystate() == ATTRIBUTE_VALUE_DQ_BRACES) yybegin(ATTRIBUTE_VALUE_DQ);
          if (yystate() == ATTRIBUTE_VALUE_SQ_BRACES) yybegin(ATTRIBUTE_VALUE_SQ);
          return SvelteTokenTypes.END_MUSTACHE;
            } 
            // fall through
          case 89: break;
          case 25: 
            { yybegin(TAG_ATTRIBUTES); return XmlTokenType.XML_ATTRIBUTE_VALUE_TOKEN;
            } 
            // fall through
          case 90: break;
          case 26: 
            { yybegin(ATTRIBUTE_VALUE_SQ); return XmlTokenType.XML_ATTRIBUTE_VALUE_START_DELIMITER;
            } 
            // fall through
          case 91: break;
          case 27: 
            { yybegin(ATTRIBUTE_VALUE_DQ); return XmlTokenType.XML_ATTRIBUTE_VALUE_START_DELIMITER;
            } 
            // fall through
          case 92: break;
          case 28: 
            { yybeginNestable(ATTRIBUTE_VALUE_BRACES); return SvelteTokenTypes.START_MUSTACHE;
            } 
            // fall through
          case 93: break;
          case 29: 
            { return XmlTokenType.XML_ATTRIBUTE_VALUE_TOKEN;
            } 
            // fall through
          case 94: break;
          case 30: 
            { yybegin(TAG_ATTRIBUTES); return XmlTokenType.XML_ATTRIBUTE_VALUE_END_DELIMITER;
            } 
            // fall through
          case 95: break;
          case 31: 
            { yybeginNestable(ATTRIBUTE_VALUE_DQ_BRACES); return SvelteTokenTypes.START_MUSTACHE;
            } 
            // fall through
          case 96: break;
          case 32: 
            { yybeginNestable(ATTRIBUTE_VALUE_SQ_BRACES); return SvelteTokenTypes.START_MUSTACHE;
            } 
            // fall through
          case 97: break;
          case 33: 
            { yybegin(YYINITIAL); return XmlTokenType.XML_PI_END;
            } 
            // fall through
          case 98: break;
          case 34: 
            { return XmlTokenType.XML_TAG_CHARACTERS;
            } 
            // fall through
          case 99: break;
          case 35: 
            { yybegin(COMMENT); return XmlTokenType.XML_COMMENT_CHARACTERS;
            } 
            // fall through
          case 100: break;
          case 36: 
            { yybegin(COMMENT); return XmlTokenType.XML_CONDITIONAL_COMMENT_END;
            } 
            // fall through
          case 101: break;
          case 37: 
            { yybegin(SVELTE_INTERPOLATION); yypushback(yylength());
            } 
            // fall through
          case 102: break;
          case 38: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 103: break;
          case 39: 
            { yybegin(SVELTE_INTERPOLATION_KEYWORD); return JSTokenTypes.COLON;
            } 
            // fall through
          case 104: break;
          case 40: 
            { yybegin(SVELTE_INTERPOLATION_KEYWORD); return JSTokenTypes.DIV;
            } 
            // fall through
          case 105: break;
          case 41: 
            { yybegin(SVELTE_INTERPOLATION_KEYWORD); return JSTokenTypes.SHARP;
            } 
            // fall through
          case 106: break;
          case 42: 
            { yybegin(SVELTE_INTERPOLATION_KEYWORD); return JSTokenTypes.AT;
            } 
            // fall through
          case 107: break;
          case 43: 
            { yybegin(START_TAG_NAME); yypushback(yylength());
            } 
            // fall through
          case 108: break;
          case 44: 
            { yybegin(PROCESSING_INSTRUCTION); return XmlTokenType.XML_PI_START;
            } 
            // fall through
          case 109: break;
          case 45: 
            { return XmlTokenType.XML_END_TAG_START;
            } 
            // fall through
          case 110: break;
          case 46: 
            { rawTag = 0; yybegin(YYINITIAL); return XmlTokenType.XML_EMPTY_ELEMENT_END;
            } 
            // fall through
          case 111: break;
          case 47: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { return XmlTokenType.XML_ATTRIBUTE_VALUE_TOKEN;
            } 
            // fall through
          case 112: break;
          case 48: 
            { yybegin(COMMENT); return XmlTokenType.XML_CONDITIONAL_COMMENT_START_END;
            } 
            // fall through
          case 113: break;
          case 49: 
            { yybegin(SVELTE_INTERPOLATION); return SvelteTokenTypes.IF_KEYWORD;
            } 
            // fall through
          case 114: break;
          case 50: 
            { yybegin(END_TAG_NAME); yypushback(yylength());
            } 
            // fall through
          case 115: break;
          case 51: 
            { return XmlTokenType.XML_ENTITY_REF_TOKEN;
            } 
            // fall through
          case 116: break;
          case 52: 
            { yybegin(YYINITIAL); return XmlTokenType.XML_COMMENT_END;
            } 
            // fall through
          case 117: break;
          case 53: 
            { yybegin(C_COMMENT_END); return XmlTokenType.XML_CONDITIONAL_COMMENT_END_START;
            } 
            // fall through
          case 118: break;
          case 54: 
            { yybegin(SVELTE_INTERPOLATION); return SvelteTokenTypes.KEY_KEYWORD;
            } 
            // fall through
          case 119: break;
          case 55: 
            { yybegin(COMMENT); return XmlTokenType.XML_COMMENT_START;
            } 
            // fall through
          case 120: break;
          case 56: 
            { return XmlTokenType.XML_CHAR_ENTITY_REF;
            } 
            // fall through
          case 121: break;
          case 57: 
            { yybegin(YYINITIAL); return XmlTokenType.XML_BAD_CHARACTER;
            } 
            // fall through
          case 122: break;
          case 58: 
            { yybegin(SVELTE_INTERPOLATION); return SvelteTokenTypes.THEN_KEYWORD;
            } 
            // fall through
          case 123: break;
          case 59: 
            { yybegin(SVELTE_INTERPOLATION); return SvelteTokenTypes.ELSE_KEYWORD;
            } 
            // fall through
          case 124: break;
          case 60: 
            { yybegin(SVELTE_INTERPOLATION); return SvelteTokenTypes.EACH_KEYWORD;
            } 
            // fall through
          case 125: break;
          case 61: 
            { rawTag = 1; yybegin(BEFORE_TAG_ATTRIBUTES); return XmlTokenType.XML_NAME;
            } 
            // fall through
          case 126: break;
          case 62: 
            { yybegin(SVELTE_INTERPOLATION); return SvelteTokenTypes.CATCH_KEYWORD;
            } 
            // fall through
          case 127: break;
          case 63: 
            { yybegin(SVELTE_INTERPOLATION); return SvelteTokenTypes.AWAIT_KEYWORD;
            } 
            // fall through
          case 128: break;
          case 64: 
            { return XmlTokenType.XML_DOCTYPE_PUBLIC;
            } 
            // fall through
          case 129: break;
          case 65: 
            { yybegin(DOC_TYPE); return XmlTokenType.XML_DOCTYPE_START;
            } 
            // fall through
          case 130: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
